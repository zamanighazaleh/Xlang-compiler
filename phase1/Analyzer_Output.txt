TOKEN_VOIDTYPE void
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER counter
TOKEN_LP (
TOKEN_INTTYPE int
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER n
TOKEN_RP )
TOKEN_WHITESPACE [space]
TOKEN_LCB {
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_LOOP for
TOKEN_WHITESPACE [space]
TOKEN_LP (
TOKEN_INTTYPE int
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER i
TOKEN_WHITESPACE [space]
TOKEN_ASSIGNOP =
TOKEN_WHITESPACE [space]
TOKEN_DECIMALCONST 0
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER i
TOKEN_WHITESPACE [space]
TOKEN_RELATIONOP <
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER n
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER i
TOKEN_WHITESPACE [space]
TOKEN_ASSIGNOP +=
TOKEN_WHITESPACE [space]
TOKEN_DECIMALCONST 1
TOKEN_RP )
TOKEN_WHITESPACE [space]
TOKEN_LCB {
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_BOOLEANTYPE boolean
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER a
TOKEN_WHITESPACE [space]
TOKEN_ASSIGNOP =
TOKEN_WHITESPACE [space]
TOKEN_BOOLEANCONST true
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_IFCONDITION if
TOKEN_WHITESPACE [space]
TOKEN_LP (
TOKEN_IDENTIFIER i
TOKEN_WHITESPACE [space]
TOKEN_ARITHMATICOP *
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER i
TOKEN_WHITESPACE [space]
TOKEN_CONDITIONOP ||
TOKEN_WHITESPACE [space]
TOKEN_BOOLEANCONST false
TOKEN_WHITESPACE [space]
TOKEN_CONDITIONOP &&
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER a
TOKEN_RP )
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_BREAKSTMT break
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_ELSECONDITION else
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_CONTINUESTMT continue
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_RCB }
TOKEN_WHITESPACE [space]
TOKEN_WHITESPACE [newline]
TOKEN_RCB }
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [newline]
TOKEN_INTTYPE int
TOKEN_WHITESPACE [space]
TOKEN_MAINFUNC main
TOKEN_LP (
TOKEN_RP )
TOKEN_WHITESPACE [space]
TOKEN_LCB {
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_CALLOUT callout
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER counter
TOKEN_LP (
TOKEN_DECIMALCONST 10
TOKEN_RP )
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_INTTYPE int
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER abs
TOKEN_WHITESPACE [space]
TOKEN_ASSIGNOP =
TOKEN_WHITESPACE [space]
TOKEN_HEXADECIMALCONST 0x55EF
TOKEN_COMMA ,
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER _9xg
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_IDENTIFIER _9xg
TOKEN_WHITESPACE [space]
TOKEN_ASSIGNOP =
TOKEN_WHITESPACE [space]
TOKEN_DECIMALCONST 10
TOKEN_WHITESPACE [space]
TOKEN_ARITHMATICOP *
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER abs
TOKEN_WHITESPACE [space]
TOKEN_ARITHMATICOP /
TOKEN_WHITESPACE [space]
TOKEN_DECIMALCONST 8
TOKEN_WHITESPACE [space]
TOKEN_ARITHMATICOP %
TOKEN_WHITESPACE [space]
TOKEN_DECIMALCONST 2
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_IFCONDITION if
TOKEN_WHITESPACE [space]
TOKEN_LP (
TOKEN_IDENTIFIER _9xg
TOKEN_WHITESPACE [space]
TOKEN_EQUALITYOP ==
TOKEN_WHITESPACE [space]
TOKEN_DECIMALCONST 1
TOKEN_WHITESPACE [space]
TOKEN_CONDITIONOP ||
TOKEN_WHITESPACE [space]
TOKEN_IDENTIFIER _9xg
TOKEN_WHITESPACE [space]
TOKEN_RELATIONOP <=
TOKEN_WHITESPACE [space]
TOKEN_HEXADECIMALCONST 0x22
TOKEN_RP )
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_STRINGCONST "hello man :)) "
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_COMMENT // tnx for all.
TOKEN_WHITESPACE [newline]
TOKEN_WHITESPACE [tab]
TOKEN_RETURN return
TOKEN_WHITESPACE [space]
TOKEN_DECIMALCONST 0
TOKEN_SEMICOLON ;
TOKEN_WHITESPACE [newline]
TOKEN_RCB }
TOKEN_WHITESPACE [newline]
